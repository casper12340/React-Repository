import { AxiosInstance } from 'axios';
import { WithID } from './types/common/with-id.cjs';
import { Customer, ExternalID, Email, Phone, FacebookID, InstagramID, Social, Url, Location, Sentiment, CustomerCreate, CustomerUpdate } from './types/models/customer.cjs';
import { KObject, KObjectCreate } from './types/models/kobject.cjs';
import { Hook } from './types/models/hook.cjs';
import { LogLevel } from './types/models/log-level.cjs';
import { Message, MessageChannel, MessageDirection, MessageDirectionType, MessageStatus, MessageSentiment, MessageCreate, MessageUpdate } from './types/models/message.cjs';
import { Org } from './types/models/org.cjs';
import { KLogger, Logger } from './logger/logger.cjs';
import { Visibility } from './types/common/visibility.cjs';
import { ENVS } from './utils/envs.cjs';

declare class Commands {
    private readonly api;
    private _orgId;
    constructor(api: API);
    /**
     * run one of your apps commands
     * @param name command name
     * @param body command body
     * @returns command response
     */
    run<B = unknown, R = unknown>(name: string, body?: B): Promise<R | undefined>;
}

declare class Customers {
    private readonly api;
    constructor(api: API);
    /**
     * get a customer by id
     * @param id customer id (unique)
     * @returns customer
     */
    getById(id: string): Promise<WithID<Customer> | undefined>;
    /**
     * get a customer by external id
     * @param externalId customer external id
     */
    getByExternalId(externalId: string): Promise<{
        rev?: number | undefined;
        name?: string | undefined;
        company?: string | undefined;
        externalId?: string | undefined;
        externalIds?: ExternalID[] | undefined;
        sharedExternalIds?: ExternalID[] | undefined;
        username?: string | undefined;
        avatarUrl?: string | undefined;
        locale?: string | undefined;
        timeZone?: string | undefined;
        tags?: string[] | undefined;
        gender?: "m" | "f" | "o" | "p" | undefined;
        emails?: Email[] | undefined;
        sharedEmails?: Email[] | undefined;
        phones?: Phone[] | undefined;
        sharedPhones?: Phone[] | undefined;
        whatsapps?: Phone[] | undefined;
        facebookIds?: FacebookID[] | undefined;
        instagramIds?: InstagramID[] | undefined;
        socials?: Social[] | undefined;
        sharedSocials?: Social[] | undefined;
        urls?: Url[] | undefined;
        locations?: Location[] | undefined;
        sentiment?: Sentiment | undefined;
        dedicatedUser?: string | undefined;
        custom?: unknown;
        birthdayAt?: Date | undefined;
        signedUpAt?: Date | undefined;
        importedAt?: Date | undefined;
        lastActivityAt?: Date | undefined;
        lastCustomerActivityAt?: Date | undefined;
        lastSeenAt?: Date | undefined;
        createdAt?: Date | undefined;
        updatedAt?: Date | undefined;
        modifiedAt?: Date | undefined;
        id: string;
    } | undefined>;
    /**
     * get a customer by email
     * @param email customer email (unique)
     */
    getByEmail(email: string): Promise<WithID<Customer> | undefined>;
    /**
     * get a customer by phone
     * @param phone customer phone (unique)
     * @returns
     */
    getByPhone(phone: string): Promise<WithID<Customer> | undefined>;
    /**
     * create a new customer
     */
    create<T>(args: CustomerCreate<T>): Promise<WithID<Customer> | undefined>;
    /**
     * update an existing customer
     * @param id customer id (unique)
     */
    update<T>(id: string, args: CustomerUpdate<T>): Promise<WithID<Customer> | undefined>;
    /**
     * create a kobject for a customer
     * @param id customer id (unique)
     * @param klass klass name
     */
    createKObject<T = unknown>(id: string, klass: string, object: KObject<T>): Promise<WithID<KObject> | undefined>;
}

type HookType = 'web' | 'form' | 'email';
declare class Hooks {
    private readonly api;
    constructor(api: API);
    /**
     * Get all hooks from an API endpoint
     */
    get(type?: HookType): Promise<WithID<Hook>[] | undefined>;
}

declare class KObjects {
    private readonly api;
    constructor(api: API);
    /**
     * get a kobject by external id
     * @param externalId external id (unique)
     * @param klass the klass of the kobject
     * @returns the kobject
     */
    getByExternalId(externalId: string, klass: string): Promise<WithID<KObject> | undefined>;
    /**
     * update a kobject
     * @param id kobject id (unique)
     * @param klass the klass of the kobject
     * @param args the kobject attributes to update
     * @returns the updated kobject
     */
    update<T, D>(id: string, klass: string, args: KObjectCreate<T, D>): Promise<WithID<KObject> | undefined>;
}

type LogOptions = {
    readonly code?: number;
    readonly body?: string;
};
declare class Logs {
    private readonly api;
    constructor(api: API);
    /**
     * @param message
     * @param options
     */
    info(message: string, options?: LogOptions): Promise<void>;
    /**
     * @param message
     * @param options
     */
    warn(message: string, options?: LogOptions): Promise<void>;
    /**
     * @param message
     * @param options
     */
    error(message: string, options?: LogOptions): Promise<void>;
    /**
     * @param level
     * @param message
     * @param options
     */
    log(level: LogLevel, message: string, options?: LogOptions): Promise<void>;
}

declare class Messages {
    private readonly api;
    constructor(api: API);
    /**
     * get a message by id
     * @param id message id
     * @returns message
     */
    getById(id: string): Promise<WithID<Message> | undefined>;
    /**
     * get a message by external id
     * @param externalId message external id
     * @returns message
     */
    getByExternalId(externalId: string): Promise<{
        externalId?: string | undefined;
        app?: string | undefined;
        channel: MessageChannel;
        direction: MessageDirection;
        directionType: MessageDirectionType;
        status: MessageStatus;
        meta?: unknown;
        custom?: unknown;
        error?: unknown;
        errorAt?: Date | undefined;
        preview?: string | undefined;
        subject?: string | undefined;
        size?: number | undefined;
        sentiment?: MessageSentiment | undefined;
        sentAt: Date;
        createdAt: Date;
        createdBy: string;
        updatedAt: Date;
        modifiedAt?: Date | undefined;
        modifiedBy?: string | undefined;
        deletedAt?: Date | undefined;
        deletedBy?: string | undefined;
        importedAt?: Date | undefined;
        id: string;
    } | undefined>;
    /**
     * create a new message
     */
    create<T>(args: MessageCreate<T>): Promise<WithID<Message> | undefined>;
    /**
     * update an existing message
     * @param id message id (unique)
     */
    update<T>(id: string, args: MessageUpdate<T>): Promise<WithID<Message> | undefined>;
}

declare class Orgs {
    private readonly api;
    constructor(api: API);
    /**
     * get the token org
     * @returns org
     */
    getCurrent(): Promise<WithID<Org> | undefined>;
    /**
     * get an org by id
     * @param id org id (unique)
     * @returns org
     */
    getById(id: string): Promise<WithID<Org> | undefined>;
}

declare class Settings {
    private readonly api;
    constructor(api: API);
    /**
     * Get application settings from an API endpoint and reshape the data into a nested object.
     */
    get<T>(): Promise<T | undefined>;
    /**
     * set your apps settings
     * @param settings settings object
     */
    set<T>(settings: T): Promise<void>;
}

type APIBaseOptions = {
    app: string;
    clientId?: string;
    visibility?: Visibility;
    env?: keyof typeof ENVS;
    namespace?: boolean;
    token?: string;
    logger?: KLogger;
    axios?: AxiosInstance;
};
type APIBaseConfig = {
    token?: string;
    orgNameOrId: string;
    options: APIBaseOptions;
};
declare class API {
    readonly config: APIBaseConfig;
    readonly token: string | undefined;
    readonly orgNameOrId: string;
    readonly options: APIBaseOptions;
    readonly axios: AxiosInstance;
    readonly log: KLogger | Logger;
    readonly commands: Commands;
    readonly customers: Customers;
    readonly hooks: Hooks;
    readonly kobjects: KObjects;
    readonly logs: Logs;
    readonly messages: Messages;
    readonly orgs: Orgs;
    readonly settings: Settings;
    get baseUrls(): {
        gateway: string;
        api: string;
        web: string;
    } | {
        gateway: string;
        api: string;
        web: string;
    } | {
        gateway: string;
        api: string;
        web: string;
    } | {
        gateway: string;
        api: string;
        web: string;
    };
    /**
     * @param config API configuration
     */
    constructor(config: APIBaseConfig);
    /**
     * get an app auth token to make requests in an org
     * @param forceRefresh ignore cached values
     */
    getToken(forceRefresh?: boolean): Promise<string | undefined>;
    /**
     * intercept the request and add the auth token
     * @param config the request config
     * @private
     */
    private _onRequest;
}

export { APIBaseOptions as A, Commands as C, Hooks as H, KObjects as K, LogOptions as L, Messages as M, Orgs as O, Settings as S, APIBaseConfig as a, API as b, Customers as c, Logs as d };
