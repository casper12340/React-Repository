declare enum BasePermissions {
    /** Read the user's settings */
    UserSettingsRead = "org.user.setting.read",
    /** Write an admin's settings */
    AdminSettingsWrite = "org.admin.setting.write",
    /** Read settings */
    SettingsRead = "org.permission.setting.read",
    /** Update settings */
    SettingsUpdate = "org.permission.setting.update",
    /** Write to the user's logs */
    UserLogsWrite = "org.user.logs.write",
    /** Run a hook */
    HookRun = "org.hooks"
}
/** A file attachment */
declare enum Attachment {
    /** Read an attachment */
    Read = "org.permission.attachment.read"
}
/** The company of a user */
declare enum Company {
    /** Read a company */
    Read = "org.permission.company.read",
    /** Create a company */
    Create = "org.permission.company.create",
    /** Update a company */
    Update = "org.permission.company.update"
}
/** A conversation between a user an a customer */
declare enum Conversation {
    /** Read a conversation */
    Read = "org.permission.conversation.read",
    /** Create a conversation */
    Create = "org.permission.conversation.create",
    /** Update a conversation */
    Update = "org.permission.conversation.update",
    /** Delete a conversation */
    Delete = "org.permission.conversation.delete"
}
/** A customer on the platform */
declare enum Customer {
    /** Read a customer */
    Read = "org.permission.customer.read",
    /** Create a customer */
    Create = "org.permission.customer.create",
    /** Update a customer */
    Update = "org.permission.customer.update",
    /** Delete a customer */
    Delete = "org.permission.customer.delete"
}
/** A hook on the platform */
declare enum Hook {
    /** Read a hook */
    Read = "org.permission.hook.read",
    /** Create a hook */
    Create = "org.permission.hook.create",
    /** Update a hook */
    Update = "org.permission.hook.update",
    /** Delete a hook */
    Delete = "org.permission.hook.delete"
}
/** A custom object schema, the items of which (called "kobjects") that can be stored in Kustomer's database */
declare enum Klass {
    /** Read a klass */
    Read = "org.permission.klass.read",
    /** Create a klass */
    Create = "org.permission.klass.create",
    /** Update a klass */
    Update = "org.permission.klass.update",
    /** Delete a klass */
    Delete = "org.permission.klass.delete"
}
/** A custom object, an instance of a klass */
declare enum KObject {
    /** Read a kobject */
    Read = "org.permission.kobject.read",
    /** Create a kobject */
    Create = "org.permission.kobject.create",
    /** Update a kobject */
    Update = "org.permission.kobject.update",
    /** Delete a kobject */
    Delete = "org.permission.kobject.delete"
}
/** A kobject that's custom defined, as opposed to a standard klass that's provided by Kustomer by default */
declare enum KObjectCustom {
    /** Read a custom kobject */
    Read = "org.permission.kobject.kobject_*.read",
    /** Create a custom kobject */
    Create = "org.permission.kobject.kobject_*.create",
    /** Update a custom kobject */
    Update = "org.permission.kobject.kobject_*.update",
    /** Delete a custom kobject */
    Delete = "org.permission.kobject.kobject_*.delete"
}
/** A message in a conversation */
declare enum Message {
    /** Read a message */
    Read = "org.permission.message.read",
    /** Create a message */
    Create = "org.permission.message.create",
    /** Update a message */
    Update = "org.permission.message.update"
}
/** A metadata object */
declare enum Metadata {
    /** Read a metadata object */
    Read = "org.permission.metadata.read",
    /** Update a metadata object */
    Update = "org.permission.metadata.update"
}
/** A note on a conversation */
declare enum Note {
    /** Read a note */
    Read = "org.permission.note.read",
    /** Create a note */
    Create = "org.permission.note.create",
    /** Update a note */
    Update = "org.permission.note.update",
    /** Delete a note */
    Delete = "org.permission.note.delete"
}
/** A satisfaction survey on a conversation */
declare enum Satisfaction {
    /** Read a satisfaction survey */
    Read = "org.permission.satisfaction.read"
}
/** A search */
declare enum Search {
    /** Create a search */
    Create = "org.permission.search.create",
    /** Update a search */
    Update = "org.permission.search.update"
}
/** All possible permissions roles on the Kustomer API */
type Roles = BasePermissions | Attachment | Company | Conversation | Customer | Hook | Klass | KObject | KObjectCustom | Message | Metadata | Note | Satisfaction | Search;

type roles_Attachment = Attachment;
declare const roles_Attachment: typeof Attachment;
type roles_BasePermissions = BasePermissions;
declare const roles_BasePermissions: typeof BasePermissions;
type roles_Company = Company;
declare const roles_Company: typeof Company;
type roles_Conversation = Conversation;
declare const roles_Conversation: typeof Conversation;
type roles_Customer = Customer;
declare const roles_Customer: typeof Customer;
type roles_Hook = Hook;
declare const roles_Hook: typeof Hook;
type roles_KObject = KObject;
declare const roles_KObject: typeof KObject;
type roles_KObjectCustom = KObjectCustom;
declare const roles_KObjectCustom: typeof KObjectCustom;
type roles_Klass = Klass;
declare const roles_Klass: typeof Klass;
type roles_Message = Message;
declare const roles_Message: typeof Message;
type roles_Metadata = Metadata;
declare const roles_Metadata: typeof Metadata;
type roles_Note = Note;
declare const roles_Note: typeof Note;
type roles_Roles = Roles;
type roles_Satisfaction = Satisfaction;
declare const roles_Satisfaction: typeof Satisfaction;
type roles_Search = Search;
declare const roles_Search: typeof Search;
declare namespace roles {
  export {
    roles_Attachment as Attachment,
    roles_BasePermissions as BasePermissions,
    roles_Company as Company,
    roles_Conversation as Conversation,
    roles_Customer as Customer,
    roles_Hook as Hook,
    roles_KObject as KObject,
    roles_KObjectCustom as KObjectCustom,
    roles_Klass as Klass,
    roles_Message as Message,
    roles_Metadata as Metadata,
    roles_Note as Note,
    roles_Roles as Roles,
    roles_Satisfaction as Satisfaction,
    roles_Search as Search,
  };
}

export { Attachment as A, BasePermissions as B, Company as C, Hook as H, Klass as K, Message as M, Note as N, Roles as R, Satisfaction as S, Conversation as a, Customer as b, KObject as c, KObjectCustom as d, Metadata as e, Search as f, roles as r };
