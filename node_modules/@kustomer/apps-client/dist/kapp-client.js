import { a, b as b$1 } from './chunk-62LSQKNL.js';
import { Logger, API } from '@kustomer/apps-common';
import m, { AxiosHeaders } from 'axios';
import * as b from 'uuid';
import { escape } from 'sqlstring';
import { KAppModal } from './kapp-modal';
import * as o from './events';
import { Errors } from './errors';

const h=class h{constructor(t){b$1(this,"options");b$1(this,"id");b$1(this,"origin");b$1(this,"log");b$1(this,"_context");b$1(this,"_visibility");b$1(this,"_initialized");b$1(this,"_fetchData");b$1(this,"_api");b$1(this,"_subscriptions");b$1(this,"_modals");b$1(this,"_requests");b$1(this,"targetModal");b$1(this,"modalToken");b$1(this,"onContextChange");this.options=t,this._initialized=!1,this._fetchData=!0,this._subscriptions={},this._modals={},this._requests={};const i=this._parseQueryParam("id"),e=this._parseQueryParam("parentUrl");if(!i||!e)throw new Error(Errors.NoIDOrOrigin);this.id=i,this.origin=e,this.log=this.options.logger||new Logger(this.options.app),this._fetchData=this.options.shouldFetchData||!0,this._visibility=this.options.visibility||"private",this.targetModal=void 0,this.modalToken=void 0,window.addEventListener("message",this._onMessage.bind(this),!1),this._subscriptions[o.App.ContextUpdate]=this._onContextUpdate.bind(this),this._subscriptions[o.App.Request]=this._onRequest.bind(this);}get context(){return this._context}get visibility(){return this._visibility}get initialized(){return this._initialized}get fetchData(){return this._fetchData}get api(){if(!this._api)throw new Error(Errors.MustInitializeFirst);return this._api}get height(){const t=document.body,i=document.documentElement;return Math.max(t.scrollHeight,t.offsetHeight,i.clientHeight,i.scrollHeight,i.offsetHeight)}hide(){this.targetModal&&parent.postMessage({cardId:this.id,type:o.Modal.Hide},this.origin);}async start(t){const e=new URL(this.origin).host.split(".")[0],r=m.create({adapter:a=>new Promise((n,g)=>{const d=b.v4();this._requests[d]={resolve:n,reject:g},this._publish(o.App.Request,{requestId:d,method:a.method,url:a.url,body:a.data?JSON.parse(a.data):void 0});})});return this._api=new API({orgNameOrId:e,options:{...this.options,logger:this.log,axios:r}}),t&&(this.onContextChange=t),new Promise(a=>{if(this._initialized)return a(this._context);this._subscriptions[o.App.Initialize]=n=>{this._initialized=!0,n&&this.resize(),this._onContextUpdate(n),a(n);},this._publish(o.App.Initialize,{height:this.height});})}resize(t={height:this.height}){this._publish(o.App.Resize,t);}open(){this._publish(o.App.Open);}close(){this._publish(o.App.Close);}modal(t){const i=new KAppModal(this.id,this.origin,this.log,t,this._subscriptions,()=>{delete this._modals[i.id];},()=>{this._modals={};});return this._modals[i.id]=i,i.create()}getModalById(t){return this._modals[t]}_onMessage(t){if(t.origin===this.origin&&(t.data.type===o.Modal.Initialize&&(this.targetModal=t.data.targetModal,this.modalToken=t.data.modalToken),!!this._subscriptions[t.data.type])){if(t.data.type===o.App.Request)return this._subscriptions[t.data.type]?.(t.data);this._subscriptions[t.data.type]?.({...t.data.context,targetModal:t.data.targetModal,modalToken:t.data.modalToken,userLocale:t.data.userLocale,userRoles:t.data.userRoles});}}_onContextUpdate(t){this._context=t,this.onContextChange&&this.onContextChange(t);}_onRequest(t){const{data:i,requestId:e,err:r}=t;if(!this._requests[e])return this.log.warn(`Request ${e} not found.`);if(r)this._requests[e].reject(r);else {const a=new AxiosHeaders;this._requests[e].resolve({data:{data:i},status:200,statusText:"",headers:a,config:{headers:a}});}}_parseQueryParam(t){const e=new URL(window.location.href).searchParams.get(t),r=escape(e);if(e&&e!=="null"&&e!=="NULL")return r.slice(1,-1)}_publish(t,i){parent.postMessage({...i,cardId:this.id,type:t,targetModal:this.targetModal,modalToken:this.modalToken},this.origin);}};a(h,"KAppClient");let u=h;

export { u as KAppClient };
